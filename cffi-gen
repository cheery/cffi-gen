#!/usr/bin/env python
import re
from sys import argv, exit
from parser import Structure, Environment, parse

class Signed(object):
    def __init__(self, size):
        self.size = size

    def __repr__(self, size):
        return "s%i" % size

class Unsigned(object):
    def __init__(self, size):
        self.size = size

    def __repr__(self, size):
        return "u%i" % size

class Float(object):
    def __init__(self, size):
        self.size = size

    def __repr__(self, size):
        return "f%i" % size

class Pointer(object):
    def __init__(self, tp):
        self.tp = tp

    def __repr__(self):
        return repr(self.tp) + '*'

prim_space = {
    'pointer': Signed(8),
    'enum': Signed(4),
    'char': Unsigned(1),
    'short': Signed(2),
    'short int': Signed(2),
    'int': Signed(4),
    'long': Signed(8),
    'long int': Signed(8),
    'long unsigned int': Unsigned(8),
    'long long int': Signed(8),
    'float': Float(4),
    'double': Float(8),
    'long double': Float(16),
}
mode_types = {
    '__QI__': Signed(1),
    '__HI__': Signed(2),
    '__SI__': Signed(4),
    '__DI__': Signed(8),
    '__word__': Signed(4),
}


env = Environment()

env.types.update({
    '__builtin_va_list': Pointer(Structure(None)),
    'size_t': Unsigned(prim_space['pointer'].size),
    '_Bool': Unsigned(4),
    '_Complex': Unsigned(8),
})

parse(env, argv[1:])


nametable = []

for name in env.names:
    if re.match(r'^SDL_[A-Z]', name):
        nametable.append(name)

nametable.sort()

for name in nametable:
    print name

#print env.constants
#print env.types.keys()
#print env.hard_to_parse_macros.keys()

#for name, declarator in name_space.items():
#    if name.startswith('SDL'):
#        print name.rjust(40), ' '.join(map(repr, declarator.stack)), declarator.specifier

